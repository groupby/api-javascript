defaults:
  image: &image
    docker:
      - image: circleci/node:11.6.0
  yarn_cache: &yarn_cache
    key: yarn_cache-v{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
  yarn_install: &yarn_install
    name: Install
    command: yarn
  setup_git: &setup_git
    name: Setup Git user
    command: |
      git config --global user.email "ops@groupbyinc.com"
      git config --global user.name "GroupBy Ops"
      git config --global push.default simple

      cp .circleci/prepare-commit-msg .git/hooks/prepare-commit-msg
      chmod +x .git/hooks/prepare-commit-msg

version: 2

jobs:
  ### Stores the current build number in a file to use in unique cache keys and branch names for this workflow.
  ### The build number is guaranteed to be unique per build per project and is suitable for use as an identifier.
  generate_cache_key_file:
    <<: *image
    working_directory: ~/
    steps:
      - run: echo "$CIRCLE_BUILD_NUM" > workflow-start
      - persist_to_workspace:
          root: ~/
          paths:
            - workflow-start

  build:
    <<: *image
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache: *yarn_cache
      - run:
          name: Dependencies
          command: sudo apt install -y rsync
      - run: *yarn_install
      - save_cache:
          <<: *yarn_cache
          paths:
            - ~/.cache/yarn
      - run:
          name: Build
          command: yarn build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/dist
            - project/esnext

  unit_test:
    <<: *image
    steps:
      - run:
          name: Test
          command: yarn start ci
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache: *yarn_cache
      - run: *yarn_install
      - run:
          name: Test
          command: yarn test

  release:
    <<: *image
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache: *yarn_cache
      - run: *yarn_install
      - run: *setup_git
      - run:
          name: Install dependencies
          command: sudo apt install -y ed
      - run:
          name: Release
          command: |
            if ./scripts/release.sh; then
              exit_code=0
            elif ec=$?; (( ec == 4 )); then
              exit_code=0
            else
              exit_code=$ec
            fi

            exit $exit_code

workflows:
  version: 2

  build_test_release:
    jobs:
      - build
      - unit_test:
          requires:
            - build
      - release:
          context: org-global
          filters:
            branches:
              only: develop
          requires:
            - unit_test
